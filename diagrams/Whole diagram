@startuml
left to right direction
class Game <<Client>> {
    - CommandLineInterface cli
    - PLAYERACCESOR : PlayerAccessor
    - PACKACCESSOR : PackAccessor
    - PETACCESOR : PetAccessor
    - PetGenerator petGenerator
    - TEAMS : HashMap<String, Team>
    - RANDOM : Random
    + <<Constructor>> Game()

    + createPlayer(input: String): void
    + createPack(input: String): void
    + addToPack(input: String): void
    + buildTeam(input: String): void
    + battle(input: String): void
}

package abilities {
    class AbilityCreator {
      + {static} getRandomAbility(): SpecialAbility
    }

    interface SpecialAbility <<Strategy>> {
        + useSpecialAbility(GamePet self, GamePet other, CommandLineInterface cli) : void
    }

    class BuffSelf <<ConcreteStrategyA>> {
        + useSpecialAbility(GamePet self, GamePet other, CommandLineInterface cli) : void
    }

    class HealSelf <<ConcreteStrategyB>> {
        + useSpecialAbility(GamePet self, GamePet other, CommandLineInterface cli) : void
    }

    class HealBoth <<ConcreteStrategyC>> {
        + useSpecialAbility(GamePet self, GamePet other, CommandLineInterface cli) : void
    }

    class DebuffEnemy <<ConcreteStrategyD>> {
        + useSpecialAbility(GamePet self, GamePet other, CommandLineInterface cli) : void
    }
}

package accessor {
    class PackAccessor {
    }

    class PetAccessor {
    }

    class PlayerAccessor {
    }
}

package battle {
    class BattlePrinter {
      - CLI: CommandLineInterface
      + <<Constructor>>BattlePrinter()
      + printBattleSnapshot(): void
      + teamPrinter(): void
    }

    class BattleRunner <<Client>> {
      - battlePrinter: BattlePrinter
      - leftTeam: Team
      - rightTeam: Team
      + <<Constructor>>BattleRunner()
      + startBattle(): void
      + roundBattle(leftTeam: Team, rightTea: Team): boolean
    }

    class NoRemainingPetsException {
        + NoRemainingPetsException()
    }

    interface Team <<Aggregate>> {
      + getName(): String
      + getOrderedTeam(): TeamOrdering
      + getReversedTeam(): TeamOrdering
    }

    class TeamList <<ConcreteAggregate>> implements Team {
      - NAME: String
      + TeamList(name: String, pets: List<GamePet>)
      + TeamList(other: Team)
      + getName(): String
      + getOrderedTeam(): TeamOrdering
      + getReversedTeam(): TeamOrdering
    }

    interface TeamOrdering <<Iterator>> {
      + getNextPet(): GamePet
      + hasRemainingPets(): boolean
    }

    class OrderedTeam <<ConcreteIteratorA>> implements TeamOrdering {
      - PETS: Team
      + OrderedTeam(pets: Team)
      + getNextPet(): GamePet
      + hasRemainingPets(): boolean
    }

    class ReversedTeam <<ConcreteIteratorB>> implements TeamOrdering {
      - PETS: Team
      + ReversedTeam(pets: Team)
      + getNextPet(): GamePet
      + hasRemainingPets(): boolean
    }
}

class CommandLineInterface {
  - cli: Scanner
  - printer: PrintStream
  + CommandLineInterface(InputStream, PrintStream)
  + setInputStream(inputStream): void
  + getNextLine(): String
}


package model {
    interface CloneablePet <<Prototype>> {
        + getGamePet() : GamePet
    }
    class Pet <<ConcretePrototype>> {
        - pack: Pack
        + getGamePet() : GamePet
}

    class GamePet <<SubclassPrototype, Context>> {
        - SPECIALABILITY : SpecialAbility
        + GamePet(String, int, int, String)
        + GamePet(String, int, int, String, SpecialAbility)
        + getGamePet() : GamePet
        + getSpecialAbility() : SpecialAbility
    }

    class Player {
      - packs: List<Pack>

    }

    class Pack {
      - player: Player
      - pets: List<Pet>
      + addPets(Pet... pets): void

    }
}

package pets {
interface PetGenerator <<Subject>> {
    --
    + getRandomPet(): Pet
}

class PetService <<RealSubject>> {
    --
    + getRandomPet(): Pet
    + getResponseFromAPI(): String
}

class PetProxy <<Proxy>> {
    - petService: PetService
    --
    + getRandomPet(): Pet
}
class PetResponse {
    + toPet()
}
PetService "1" - "0..*" PetResponse : > unpack

}

class App {
    + main(String[]): void
}



PetGenerator <|- PetProxy
PetGenerator <|- PetService

PetProxy "1" *--- "1" PetService


TeamList <--> ReversedTeam
TeamList <--> OrderedTeam

CloneablePet <|.. Pet

PackAccessor ..> Pack
PetAccessor ..> Pet
PlayerAccessor ..> Player

Pack "1" o-- "0..*" Pet
Pack "0..*" *-- "1" Player



BattleRunner --> GamePet : > uses
GamePet "1" *--> "1" SpecialAbility
SpecialAbility <|.. BuffSelf
SpecialAbility <|.. HealSelf
SpecialAbility <|.. HealBoth
SpecialAbility <|.. DebuffEnemy

BattleRunner "1" --> "2" Team : > gets
Team ..> TeamOrdering


GamePet --|> Pet
GamePet "3" -- "1" TeamList

BattleRunner ..> BuffSelf
BattleRunner ..> HealSelf
BattleRunner ..> HealBoth
BattleRunner ..> DebuffEnemy
BattleRunner --> TeamOrdering : > uses

AbilityCreator ..> BuffSelf
AbilityCreator ..> HealSelf
AbilityCreator ..> HealBoth
AbilityCreator ..> DebuffEnemy

App --> Game

Game --- accessor
Game --> CommandLineInterface : > in/out
Game "1" -- "1" BattleRunner : > uses

NoRemainingPetsException -- ReversedTeam
NoRemainingPetsException -- OrderedTeam
NoRemainingPetsException -- TeamOrdering

BattlePrinter *-- BattleRunner : > uses


Game --> CloneablePet : > clones
Game --> PetGenerator: > uses
@enduml