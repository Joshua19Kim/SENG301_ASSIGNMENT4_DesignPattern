@startuml
interface Team <<Interface>> {
  + getName(): String
  + getOrderedTeam(): TeamOrdering
  + getReversedTeam(): TeamOrdering
}
note right: Aggregate


class TeamList implements Team {
  - NAME: String
  + TeamList(name: String, pets: List<GamePet>)
  + TeamList(other: Team)
  + getName(): String
  + getOrderedTeam(): TeamOrdering
  + getReversedTeam(): TeamOrdering
}
note right: ConcreteAggregate


interface TeamOrdering <<Interface>> {
  + getNextPet(): GamePet
  + hasRemainingPets(): boolean
}
note left: Iterator


class OrderedTeam implements TeamOrdering {
  - currentIndex: int
  - PETS: Team
  + OrderedTeam(pets: Team)
  + getNextPet(): GamePet
  + hasRemainingPets(): boolean
}
note left: ConcreteIteratorA

class ReversedTeam implements TeamOrdering {
  - currentIndex: int
  - PETS: Team
  + ReversedTeam(pets: Team)
  + getNextPet(): GamePet
  + hasRemainingPets(): boolean
}
note right: ConcreteIteratorB


class BattleRunner {
}
note right: Client

Team -.-> TeamOrdering
BattleRunner --> Team : > gets
BattleRunner --> TeamOrdering : > uses
TeamList <--> ReversedTeam
TeamList <--> OrderedTeam
@enduml